<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[python3从零开开始_01:python简介]]></title>
    <url>%2Fpython3%2Fpython3%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%BC%80%E5%A7%8B-01-python%E7%AE%80%E4%BB%8B%2F</url>
    <content type="text"><![CDATA[Python是一种计算机程序设计语言。是一种动态的、面向对象的脚本语言，最初被设计用于编写自动化脚本(shell)，随着版本的不断更新和语言新功能的添加，越来越多被用于独立的、大型项目的开发。 python的起源Python是由一位Guido von Rossum叫荷兰人创造，俗称龟叔。1982年，Guido从阿姆斯特丹大学(University of Amsterdam)获得了数学和计算机硕士学位。然而，尽管他算得上是一位数学家，但他更加享受计算机带来的乐趣。用他的话说，尽管拥有数学和计算机双料资质，他总趋向于做计算机相关的工作，并热衷于做任何和编程相关的活儿。 在那个时候，他接触并使用过诸如Pascal、C、 Fortran等语言。这些语言的基本设计原则是让机器能更快运行。在80年代，虽然IBM和苹果已经掀起了个人电脑浪潮，但这些个人电脑的配置很低 (在今天看来)。比如早期的Macintosh，只有8MHz的CPU主频和128KB的RAM，一个大的数组就能占满内存。所有的编译器的核心是做优化，以便让程序能够运行。为了增进效率，语言也迫使程序员像计算机一样思考，以便能写出更符合机器口味的程序。在那个时代，程序员恨不得用手榨取计算机每一寸的能力。有人甚至认为C语言的指针是在浪费内存。至于动态类型，内存自动管理，面向对象…… 别想了，那会让你的电脑陷入瘫痪。 然而，这种思考方式让Guido感到苦恼。Guido知道如何用C语言写出一个功能，但整个编写过程需要耗费大量的时间 (即使他已经准确的知道了如何实现)。他的另一个选择是shell。Bourne Shell作为UNIX系统的解释器(interpreter)已经长期存在。UNIX的管理员们常常用shell去写一些简单的脚本，以进行一些系统维护的工作，比如定期备份、文件系统管理等等。shell可以像胶水一样，将UNIX下的许多功能连接在一起。许多C语言下上百行的程序，在shell下只用几行就可以完成。然而，shell的本质是调用命令。它并不是一个真正的语言。比如说，shell没有数值型的数据类型，加法运算都很复杂。总之，shell不能全面的调动计算机的功能。 Guido希望有一种语言，这种语言能够像C语言那样，能够全面调用计算机的功能接口，又可以像shell那样，可以轻松的编程。ABC语言让Guido看到希望。ABC是由荷兰的CWI (Centrum Wiskunde &amp; Informatica, 数学和计算机研究所)开发的。Guido在CWI工作，并参与到ABC语言的开发。ABC语言以教学为目的。与当时的大部分语言不同，ABC语言的目标是“让用户感觉更好”。ABC语言希望让语言变得容易阅读，容易使用，容易记忆，容易学习，并以此来激发人们学习编程的兴趣。比如下面是一段来自Wikipedia的ABC程序，这个程序用于统计文本中出现的词(word)的总数：(一下代码没必要懂，了解即可)1234567HOW TO RETURN words document: PUT &#123;&#125; IN collection FOR line IN document: FOR word IN split line: IF word not.in collection: INSERT word IN collection RETURN collection HOW TO用于定义一个函数。一个Python程序员应该很容易理解这段程序。ABC语言使用冒号(:)和缩进来表示程序块(C语言使用{}来表示程序块)。行尾没有分号。for和if结构中也没有括号()。如果将HOW TO改为def，将PUT行改为collection = []，将INSERT行改为collection.append(word)，这就几乎是一个标准的Python函数。上面的函数读起来就像一段自然的文字。 尽管已经具备了良好的可读性和易用性，ABC语言最终没有流行起来。在当时，ABC语言编译器需要比较高配置的电脑才能运行。而这些电脑的使用者通常精通计算机，他们更多考虑程序的效率，而非它的学习难度。 python的诞生1989年圣诞节期间，在阿姆斯特丹，Guido为了打发圣诞节的无趣，决心开发一个新的脚本解释程序，作为ABC 语言的一种继承。之所以选中Python（大蟒蛇的意思）作为该编程语言的名字，是取自英国20世纪70年代首播的电视喜剧《蒙提.派森干的飞行马戏团》（Monty Python’s Flying Circus）。 Python语法很多来自C，但又受到ABC语言的强烈影响。来自ABC语言的一些规定直到今天还富有争议，比如强制缩进。但这些语法规定让Python容易读。另一方面，Python聪明的选择服从一些惯例(特别是C语言的惯例)。比如使用等号赋值，使用def来定义函数。Guido认为，如果“常识”上确立的东西，没有必要过度纠结。 Python从一开始就特别在意可拓展性(extensibility)。Python可以在多个层次上拓展。从高层上，你可以引入.py文件。在底层，你可以引用C语言的库。Python程序员可以快速的使用Python写.py文件作为拓展模块。但当性能是考虑的重要因素时，Python程序员可以深入底层，写C程序，编译为.so文件引入到Python中使用。Python就好像是使用钢构建房一样，先规定好大的框架。而程序员可以在此框架下相当自由的拓展或更改。 最初的Python完全由Guido本人开发。Python得到Guido同事的欢迎。他们迅速的反馈使用意见，并参与到Python的改进。Guido和一些同事构成Python的核心团队。他们将自己大部分的业余时间用于hack Python (也包括工作时间，因为他们将Python用于工作)。随后，Python拓展到CWI之外。Python将许多机器层面上的细节隐藏，交给编译器处理，并凸显出逻辑层面的编程思考。Python程序员可以花更多的时间用于思考程序的逻辑，而不是具体的实现细节 (Guido有一件T恤，写着：人生苦短，我用Python)。这一特征吸引了广大的程序员。Python开始流行。 python的应用好了，上面讲了那么多，现在我们来看看我们学的python到底能做什么？ 目前Python主要应用领域 云计算: 云计算最火的语言， 典型应用OpenStack WEB开发: 众多优秀的WEB框架，众多大型网站均为Python开发，Youtube, Dropbox, 豆瓣。。。， 典型WEB框架有Django 科学运算、人工智能: 典型库NumPy, SciPy, Matplotlib, Enthought librarys,pandas 系统运维: 运维人员必备语言 金融：量化交易，金融分析，在金融工程领域，Python不但在用，且用的最多，而且重要性逐年提高。原因：作为动态语言的Python，语言结构清晰简单，库丰富，成熟稳定，科学计算和统计分析都很牛逼，生产效率远远高于c,c++,java,尤其擅长策略回测 图形GUI: PyQT, WxPython,TkInter Python在一些公司的应用 谷歌：Google App Engine 、code.google.com 、Google earth 、谷歌爬虫、Google广告等项目都在大量使用Python开发CIA: 美国中情局网站就是用Python开发的NASA: 美国航天局(NASA)大量使用Python进行数据分析和运算 YouTube:世界上最大的视频网站YouTube就是用Python开发的 Dropbox:美国最大的在线云存储网站，全部用Python实现，每天网站处理10亿个文件的上传和下载 Instagram:美国最大的图片分享社交网站，每天超过3千万张照片被分享，全部用python开发 Facebook:大量的基础库均通过Python实现的: 世界上最流行的Linux发行版本中的yum包管理工具就是用python开发的 豆瓣: 公司几乎所有的业务均是通过Python开发的 知乎: 国内最大的问答社区，通过Python开发(国外Quora) 春雨医生：国内知名的在线医疗网站是用Python开发的除上面之外，还有搜狐、金山、腾讯、盛大、网易、百度、阿里、淘宝 、土豆、新浪、果壳等公司都在使用Python完成各种各样的任务。 看完上面的介绍后是不是觉得python非常的厉害，各大公司都在应用python做开发，小到简单的模块功能，大到科学运算、人工智能、数据分析，无所不能一样，但是很遗憾，每种编程语言都有各自的优缺点，这是无法避免的，那接下来就看看python都有什么优缺点，可以快速的决定python是否适合自己使用 Python的优缺点先看优点: Python的定位是“优雅”、“明确”、“简单”，所以Python程序看上去总是简单易懂，初学者学Python，不但入门容易，而且将来深入下去，可以编写那些非常非常复杂的程序。 开发效率非常高，Python有非常强大的第三方库，基本上你想通过计算机实现任何功能，Python官方库里都有相应的模块进行支持，直接下载调用后，在基础库的基础上再进行开发，大大降低开发周期，避免重复造轮子。 高级语言——当你用Python语言编写程序的时候，你无需考虑诸如如何管理你的程序使用的内存一类的底层细节。 可移植性——由于它的开源本质，Python以及被移植到许多平台上（经过改动使它能够工作在不同平台上）。如果你小心的避免使用依赖于系统的特性，那么你的Python程序无需修改就几乎可以在市场上所有的系统平台上运行。 可扩展性——如果你需要你的一段关键代码运行得更快或者希望某些算法不公开，你可以把你的部分程序用C或C++编写，然后在你的Python程序中使用它们。 可嵌入性——你可以把Python嵌入你的C/C++程序，从而向你的程序用户提供脚步功能。 再看缺点： 速度慢，Python的运行速度相比C语言确实慢很多，跟Java相比也要慢一些，因此这是很多所谓的大牛不屑于使用Python的主要原因，但其实这里所指的运行速度慢在大多数情况下用户是无法直接感知到的，必须借助测试工具才能体现出来！ 代码不能加密，因为Python是解释性语言，它的源码都是以明文形式存放的，不过我不认为这算是一个缺点，如果你的项目源代码必须是加密的，那你一开始就不应该用Python来去实现。 线程不能利用多CPU问题，这是Python被人诟病最多的一个缺点，GIL即全局解释器锁（Global Interpreter Lock），是计算机程序设计语言解释器用于同步线程的工具，使得任何时刻仅有一个线程在执行，Python的线程是操作系统的原生线程。在Linux上为pthread，在windows上为Win thread，完全由操作系统调度线程的执行。一个Python解释器进程内有一条主线路，以及多条用户程序的执行线程。即使在多核CPU平台上，由于GIL的存在，所以禁止线程的并行执行。关于这个问题的折衷解决方法，我们在以后线程和进程章节里再进行详细探讨。 选python2还是python3了解完python的优缺点后，我们来了解下python现在的版本问题，到目前为止python官网出了两个版本，一个是python2，另一个是python3，而且这两个版本并不兼容，这也就意味着，如果你学的是python2，那么有些东西在python3是无法使用的，而且官网也明确说了，python2将不再维护更新，建议使用python3，所以这个问题，很明确，我们现在应该选择python3。 好了，关于python的介绍就到此为止了，虽然这些不需要我们记下来，但是，既然以后要开始学习python，起码应该了解python的一些课外内容，在下一篇文章，我们将学习如何安装python和编写我们的一个程序。]]></content>
      <categories>
        <category>python3</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>教程</tag>
        <tag>系列</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[python3从零开始]]></title>
    <url>%2Fpython3%2Fpython3%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%2F</url>
    <content type="text"><![CDATA[在写这篇文章的时候，我一直在想我作为一名博客新人到底第一篇应该写点什么？因为本人也不是什么大神，我也很害怕自己写的不好，甚至害怕会误人子弟，所以我选择了第一篇就以python3为开端，虽然现在网上有许多的python的教程，也有很多的大神的文章，那么有人就会问了，“既然网上有那么多的python的教程了，为什么我还要写这种教程”，这个问题我也想过，大神的很多文章写的都很详细，而且他们的经验都比较丰富，但是有些教程时间很长了，有些东西已经过时了，或者有更加简单的方法，如果大家都还在看着过旧的教程，难免会造成误导，所以我写了一个python的教程系列，希望想学python的朋友能少走一些弯路。 前言本来打算将python的教程全部写在这篇文章里，如果全部写在一片文章里可能会造成文章的篇幅太大，而且不易分类和快速查找，所以我将这篇文章作为目录和一些自己学python的一些心得。 目录 python3从零开始_01:python简介]]></content>
      <categories>
        <category>python3</category>
      </categories>
      <tags>
        <tag>入门</tag>
        <tag>教程</tag>
        <tag>系列</tag>
      </tags>
  </entry>
</search>
